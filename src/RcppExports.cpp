// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// hash_string_vector
IntegerVector hash_string_vector(const StringVector& sv);
RcppExport SEXP jsutils_hash_string_vector(SEXP svSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const StringVector& >::type sv(svSEXP);
    rcpp_result_gen = Rcpp::wrap(hash_string_vector(sv));
    return rcpp_result_gen;
END_RCPP
}
// hash_string_vector_std
IntegerVector hash_string_vector_std(const StringVector& sv);
RcppExport SEXP jsutils_hash_string_vector_std(SEXP svSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const StringVector& >::type sv(svSEXP);
    rcpp_result_gen = Rcpp::wrap(hash_string_vector_std(sv));
    return rcpp_result_gen;
END_RCPP
}
// hash_numeric_vector_std
IntegerVector hash_numeric_vector_std(const NumericVector& sv);
RcppExport SEXP jsutils_hash_numeric_vector_std(SEXP svSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type sv(svSEXP);
    rcpp_result_gen = Rcpp::wrap(hash_numeric_vector_std(sv));
    return rcpp_result_gen;
END_RCPP
}
// hash_integer_vector_std
IntegerVector hash_integer_vector_std(const IntegerVector& sv);
RcppExport SEXP jsutils_hash_integer_vector_std(SEXP svSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type sv(svSEXP);
    rcpp_result_gen = Rcpp::wrap(hash_integer_vector_std(sv));
    return rcpp_result_gen;
END_RCPP
}
// hash_logical_vector_std
IntegerVector hash_logical_vector_std(const LogicalVector& sv);
RcppExport SEXP jsutils_hash_logical_vector_std(SEXP svSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalVector& >::type sv(svSEXP);
    rcpp_result_gen = Rcpp::wrap(hash_logical_vector_std(sv));
    return rcpp_result_gen;
END_RCPP
}
// hash_combine
IntegerVector hash_combine(const IntegerVector& hash1, const IntegerVector& hash2);
RcppExport SEXP jsutils_hash_combine(SEXP hash1SEXP, SEXP hash2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type hash1(hash1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type hash2(hash2SEXP);
    rcpp_result_gen = Rcpp::wrap(hash_combine(hash1, hash2));
    return rcpp_result_gen;
END_RCPP
}
// inplace
void inplace(SEXP target, SEXP src);
RcppExport SEXP jsutils_inplace(SEXP targetSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type target(targetSEXP);
    Rcpp::traits::input_parameter< SEXP >::type src(srcSEXP);
    inplace(target, src);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"jsutils_hash_string_vector", (DL_FUNC) &jsutils_hash_string_vector, 1},
    {"jsutils_hash_string_vector_std", (DL_FUNC) &jsutils_hash_string_vector_std, 1},
    {"jsutils_hash_numeric_vector_std", (DL_FUNC) &jsutils_hash_numeric_vector_std, 1},
    {"jsutils_hash_integer_vector_std", (DL_FUNC) &jsutils_hash_integer_vector_std, 1},
    {"jsutils_hash_logical_vector_std", (DL_FUNC) &jsutils_hash_logical_vector_std, 1},
    {"jsutils_hash_combine", (DL_FUNC) &jsutils_hash_combine, 2},
    {"jsutils_inplace", (DL_FUNC) &jsutils_inplace, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_jsutils(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
