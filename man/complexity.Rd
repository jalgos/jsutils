% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/complexity.R
\name{complexity}
\alias{average.time.fun}
\alias{average.time.map}
\alias{complexity}
\title{Measuring function runtime}
\usage{
average.time.fun(fun, par, nrep, nms = names(par), prefun = function(...)
  list(...), ..., logger = jlogger::JLoggerFactory("Complexity"))

average.time.map(par.down, par.up, par.nchunks, par.names = names(par.down),
  filter = TRUE, ..., logger = jlogger::JLoggerFactory("Complexity"))
}
\arguments{
\item{fun}{Function for which you want to run the measure}

\item{par}{Parameters of the function}

\item{nrep}{Number of time the function will run}

\item{nms}{Names of the parameters}

\item{prefun}{Optional function to get the real parameters of the function from the parameters provided}

\item{...}{Arguments to be passed to average.time.fun and the function 'fun'}

\item{logger}{jlogger::JLogger to output info on the state of computations}

\item{par.down}{lower bounds of the parameters}

\item{par.up}{upper bounds of the parameters}

\item{par.nchunks}{Number of points in the grid. One entry per parameter.}

\item{par.names}{Names of the parameters}

\item{filter}{expression to filter out some prameters combinations}
}
\section{Functions}{
\itemize{
\item \code{average.time.fun}: Measure the time a function takes to run by running it several times

\item \code{average.time.map}: Computes runtime as a function of a set of parameters. It will produce a grid and run average.time.fun for each parameter combination.
}}

