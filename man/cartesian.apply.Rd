% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/applies.R
\name{cartesian.apply}
\alias{cart.apply}
\alias{cartesian.apply}
\alias{dt.cart.apply}
\alias{half.cart.apply}
\title{Cartesian Apply}
\usage{
cart.apply(L1, L2 = L1, funapp, ..., fapply = lapply, fapply2 = fapply,
  unlist = FALSE)

half.cart.apply(L1, L2 = L1, funapp, ..., fapply = lapply,
  fapply2 = fapply, unlist = FALSE)

dt.cart.apply(funapp, Largs, ...)
}
\arguments{
\item{L1}{A list of arguments}

\item{L2}{A list of arguments}

\item{funapp}{Function to apply to the combinations of L1 and L2 members}

\item{...}{Additional parameters to be passed on to funapp}

\item{fapply}{First apply function to use}

\item{fapply2}{Second apply function to use}

\item{unlist}{Should the result be unlisted}

\item{Largs}{List of arguments to produce the grid on which the function will be applied}
}
\details{
To be used when a function needs to be applied to all the combinations of a set of lists of parameters
}
\section{Functions}{
\itemize{
\item \code{cart.apply}: Applies a function to all the combination in L1 and L2

\item \code{half.cart.apply}: Applies when we want to compute f(xi, xj) only when i <= j

\item \code{dt.cart.apply}: Applies a function to the cartesian product of an arbitrary number of lists. Uses a data.table to do so
}}

